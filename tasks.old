boot
----
1. write stage 1 boot loader in MBR - V

kernel
------
1. create kernel program, with CPU initialization - V
2. basic loader (executable files without header, just put in free segment). block mode reading. - V

init
----
1. load init program + call it - V

system calls
------------
1. create dispatcher - V
2. create system call user library - V
3. create ASM mapper to dispatcher (user & system sides) - V
4. register dispatcher in IVT at 80h - V

shell
-----
1. write simple shell that answers to commands and uses system calls - V

Fixes
-----
1. build a structure in order to pass parameter to system calls - V.
2. the pointer of the user structure will be in register SI - V.
3. kernel should copy the data and push a pointer to the stack, allowing dispatcher to use as reference param - V
4. call putchar and printstr system calls directly from shell and check that it works - V
5. update stdio putchar and printstr to call system calls instead BIOS - V
6. call getchar system call directly from shell and check that it works - V
7. update stdio getchar to call system calls instead BIOS - V


More fixes
----------
1. memory manager - build an array in the kernel to manage segments and load programs dynamically - V
2. fix bug when returning from init to kernel, segment variable value is truncated. SOMETHING WRONG WITH THE STACK!!!
   it seems that the call far function doing something - V
3. separate shell from init and load shell from init by system call. - V

Next release (file system):
-------------
1. compile file system into kernel and map it to kernel low level sector reading. -V
2. put init and shell in a filesystem instead reading from sectors directly. -V
3. load init and shell from the filesystem. - V

Next release (scheduler):
-------------
1. how to program PIC (IRQ0 to interrupt handler)
2. how to program PIT (timer configurations)
3. handler will be a part of the scheduler in assembly.
4. a data structure to manage user spaces / applications
5. before loading a program, register it to this data stucture

standard library
----------------
1. implement the most used functions of C standard library -V

Next release:
-------------
1. memory management - malloc and free for user space.

IO
--
1. write assembly code to map between assembly low-level instructions to C language. - V
1.1. includes cli,sti,in,out - V