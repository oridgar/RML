Peripherals to manage:
1. keyboard
2. screen

file structure:
arch - machine dependent code
arch/8088/boot - boot loader code
arch/8088/kernel - kernel assembly code
arch/8088/mm - memory management low level
include - user libraries header files
lib - user libraries, both C standard library and linux system call wrappers
init - init system, first user process
utils - user space utilities such as minimized shell

Code:
1. write stage 1 boot loader in MBR
2. write stage 2 boot loader binary mode on floppy (no file)
3. write assembly code to map between assembly low-level instructions to C language.
3.1. includes cli,sti,in,out
3.2. includes mapping BIOS to C language
4. write kernel basics (syscalls such as working with screen, keyboard)
6. wrap kernel with system call library functions (use int 0x80)
7. write simple shell that answers to commands
5. write basic memory management (allocate/free memory, etc.)
8. basic filesystem
9. loader (executable files without header, just put in free segment)


---------
registers
---------

general purpose
---------------
1.ax
2.bx
3.cx
4.dx

segment
-------
5.cs - code segment. ip related to this.
6.ds - data segment
7.ss - stack segment
8.es - extra segment. for your own use. useful when writing to other segments.

strings and arrays
------------------
9.si - source index
10.di - destination index

stack
-----
11.bp - base pointer. indirect access to data in segments. useful for function params.
12.sp - stack top address. related to ss

special purpose
---------------
13.ip

flags register
--------------
16 bit, from which 11 bits are used.
cannot read directly. some instructions use the flags (such as conditional jumps).



memory map - segments:
----------------------
0000h - IVT, Boot loader 0 - 64K
1000h - kernel code 64K - 128K
2000h - init & shell 128K - 192K
3000h - stack segment 192K - 256K
4000h - empty 256K - 320K 
5000h - empty 320K - 384K
6000h - empty 384K - 448K
7000h - empty 448K - 512K
8000h - empty 512K - 576K
9000h - empty 576K - 640K
A000h -> F000h - BIOS and memory mapped hardware

diskette map
------------
C0,H0,S0 - boot loader (volume boot record)
C0,H0,S1 - extended boot loader
C0,H0,S2 - shell code
C0,H0,S3 - shell code
C0,H0,S4 - syscall dispatcher

boot stages
-----------
boot.asm -> dispatch.asm (+fdsptch.c) -> head.asm -> init.c -> shell.c


filesystem FAT
--------------
fat_filelib.c - the main API file
example.c - example + mapping to block level API
fat_access.c - low level of block mode commands
fat_cache.c
fat_format.c - format disk with the filesystem structure
fat_misc - 
fat_string.c - string operations on file name and extension. this is higher level.
fat_table.c - read the FAT metadata from the filesystem (the main table which manages clusters)
fat_write.c - for adding new clusters to file and new files to directories


call stack for filesystem
-------------------------
example.c -> fat_filelib.c -> fat_access.c -> (example.c) -> io.c -> dispatch.asm / dispatch.c -> kernel.c -> BIOS / drivers
                           -> fat_table.c
			   -> fat_write.c
			   -> fat_misc.c
			   -> fat_string.c
			   -> fat_filelib.c
			   -> fat_cache.c

dependent on stdlib.h and string.h


standard library mapping
------------------------
stdio.c -> io.c -> dispatch.asm / dispatch.c -> kernel.c -> BIOS / drivers